'use server';

import { prisma } from '@/prisma/prisma-client';
import { PayOrderTemplate, VerificationUserTemplate } from '@/shared/components/shared/email-templates';


import { CheckoutFormValues } from '@/shared/constants';
import { sendEmail } from '@/shared/lib';
import { getUserSession } from '@/shared/lib/get-user-session';

import { OrderStatus, Prisma } from '@prisma/client';
import { hashSync } from 'bcrypt';

import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import Stripe from 'stripe';
import { z } from 'zod';
import { revalidatePath } from 'next/cache';
import { changePasswordSchema, personalDataSchema } from '@/shared/components/shared/modals/auth-modal/forms/schemas';



export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = await cookies();
    const cartToken = cookieStore.get('cartToken')?.value;

    if (!cartToken) {
      throw new Error('Cart token not found');
    }

    // === –ö–†–û–ö 1: –û–¢–†–ò–ú–£–Ñ–ú–û –°–ï–°–Ü–Æ –ü–û–¢–û–ß–ù–û–ì–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===
    const session = await getUserSession();

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (!userCart) {
      throw new Error('Cart not found');
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (userCart?.totalAmount === 0) {
      throw new Error('Cart is empty');
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        fullName: data.firstName + ' ' + data.lastName,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),

        // === –ö–†–û–ö 2: –î–û–î–ê–Ñ–ú–û ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê, –Ø–ö–©–û –í–Ü–ù –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ò–ô ===
        // –¶–µ –≥–æ–ª–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.
        userId: session?.id ? Number(session.id) : undefined,
      },
    });

    // –û—á–∏—â—É—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    const paymentUrl = 'https://payment.url/confirm/'; // –¶–µ –∑–∞–≥–ª—É—à–∫–∞, –π–º–æ–≤—ñ—Ä–Ω–æ –≤–∏ —ó—ó –∑–∞–º—ñ–Ω–∏—Ç–µ

    await sendEmail(
      data.email,
      'Next Pizza / –û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #' + order.id,
      await PayOrderTemplate({
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl,
      }),
    );

    return paymentUrl;
  } catch (err) {
    console.log('[CreateOrder] Server error', err);
    // –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∞–±–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫—É, —â–æ–± –∫–ª—ñ—î–Ω—Ç –∑–Ω–∞–≤ –ø—Ä–æ –Ω–µ—ó
    throw new Error('Failed to create order.');
  }
}


const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);


export async function createCheckoutSession(formData: FormData) {
  const orderId = Number(formData.get('orderId'));

  if (!orderId) {
    throw new Error('Order ID is required');
  }

  // 1. –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –Ω–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  const order = await prisma.order.findUnique({
    where: { id: orderId },
  });

  if (!order) {
    throw new Error('Order not found');
  }

  // 2. –°—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–µ—Å—ñ—é –≤ Stripe
  const checkoutSession = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [
      {
        price_data: {
          currency: 'uah',
          product_data: {
            name: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}`,
            description: `–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Pizza Republic`,
          },
          // –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö!
          unit_amount: order.totalAmount * 100,
        },
        quantity: 1,
      },
    ],
    mode: 'payment',
    // 3. –í–∫–∞–∑—É—î–º–æ URL, –∫—É–¥–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    success_url: `${process.env.NEXT_PUBLIC_APP_URL}/payment/success?orderId=${order.id}`,
    cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/payment/cancel`,
    // 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞—à ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ –ø—Ä–∏ webhook
    metadata: {
      orderId: order.id,
    },
  });

  if (!checkoutSession.url) {
    throw new Error('Could not create checkout session');
  }

  // 5. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏ Stripe
  redirect(checkoutSession.url);
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();

    if (!currentUser) {
      throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password ? hashSync(body.password as string, 10) : findUser?.password,
      },
    });
  } catch (err) {
    console.log('Error [UPDATE_USER]', err);
    throw err;
  }
}


export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.verified) {
        throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }

      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const createdUser = await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });

    const code = Math.floor(100000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    await sendEmail(
      createdUser.email,
      'Next Pizza / üìù –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
      await VerificationUserTemplate({
        code,
      }),
    );
  } catch (err) {
    console.log('Error [CREATE_USER]', err);
    throw err;
  }
}

export async function updatePersonalData(
  values: z.infer<typeof personalDataSchema>
) {
  const session = await getUserSession();
  if (!session?.id) {
    throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π");
  }

  try {
    await prisma.user.update({
      where: { id: Number(session.id) },
      data: {
        fullName: values.fullName,
        // –†—è–¥–æ–∫ –∑ 'phone' –≤–∏–¥–∞–ª–µ–Ω–æ
      },
    });
    revalidatePath("/profile");
  } catch (error) {
    console.error("ERROR [UPDATE_PERSONAL_DATA]:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ.");
  }
}

export async function updateUserPassword(
  values: z.infer<typeof changePasswordSchema>
) {
  const session = await getUserSession();
  if (!session?.id) {
    throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π");
  }

  try {
    const hashedPassword = hashSync(values.newPassword, 10);
    await prisma.user.update({
      where: { id: Number(session.id) },
      data: {
        password: hashedPassword,
      },
    });
  } catch (error) {
    console.error("ERROR [UPDATE_USER_PASSWORD]:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–æ–ª—å.");
  }
}

export async function updateOrderStatus(orderId: number, status: OrderStatus) {
  await checkManagerRole();

  try {
    await prisma.order.update({
      where: { id: orderId },
      data: { status },
    });
    revalidatePath('/manager');
  } catch (error) {
    console.error('Error [UPDATE_ORDER_STATUS]', error);
    throw Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å.');
  }
}


export async function checkManagerRole() {
  const session = await getUserSession();
  if (session?.role !== 'MANAGER' && session?.role !== 'ADMIN') {
    throw new Error('Forbidden: Insufficient permissions');
  }
}


export async function getChatMessages() {
  const session = await getUserSession();
  if (!session?.id) return null;

  const conversation = await prisma.conversation.findUnique({
    where: { userId: Number(session.id) },
    include: {
      messages: {
        orderBy: { createdAt: "asc" },
      },
    },
  });

  return conversation;
}


export async function deleteConversation(conversationId: number) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
  const session = await getUserSession();
  if (session?.role !== 'MANAGER' && session?.role !== 'ADMIN') {
    throw new Error('Forbidden: Insufficient permissions');
  }

  try {
    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü—ñ—î—é —Ä–æ–∑–º–æ–≤–æ—é
    await prisma.message.deleteMany({
      where: { conversationId: conversationId },
    });
    
    // –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ —Å–∞–º—É —Ä–æ–∑–º–æ–≤—É
    await prisma.conversation.delete({
      where: { id: conversationId },
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —á–∞—Ç—ñ–≤, —â–æ–± —Å–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏–≤—Å—è
    revalidatePath('/manager/chat');
  } catch (error) {
    console.error("Error [DELETE_CONSERVATION]", error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É.');
  }
}



// –ü–æ–∑–Ω–∞—á–∞—î —Ä–æ–∑–º–æ–≤—É —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
export async function markConversationAsViewed(conversationId: number) {
  const session = await getUserSession();
  if (session?.role !== 'MANAGER' && session?.role !== 'ADMIN') {
    return;
  }

  try {
    await prisma.conversation.update({
      where: { id: conversationId },
      data: { lastViewedByManager: new Date() },
    });

    revalidatePath('/manager/chat');
  } catch (error) {
    // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    console.error("Failed to mark conversation as viewed:", error);
  }
}