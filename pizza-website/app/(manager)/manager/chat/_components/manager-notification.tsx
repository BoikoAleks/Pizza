"use client";

import { useEffect } from "react";
import Pusher from "pusher-js";
import toast from "react-hot-toast";
import { Message, User } from "@prisma/client";
import { useRouter } from "next/navigation";

// –¢–∏–ø –¥–∞–Ω–∏—Ö, —è–∫—ñ –º–∏ –æ—á—ñ–∫—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ Pusher
type UpdatedConversation = {
  id: number;
  user: User;
  messages: Message[];
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-—Å–ª—É—Ö–∞—á. –í—ñ–Ω –Ω–µ –º–∞—î –≤–ª–∞—Å–Ω–æ–≥–æ UI.
export const ManagerNotificationHandler = () => {
  const router = useRouter();

  useEffect(() => {
    const pusher = new Pusher(process.env.NEXT_PUBLIC_PUSHER_KEY!, {
      cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER!,
    });

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–∞–Ω–∞–ª, –∫—É–¥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
    const channel = pusher.subscribe("manager-chat-list");

    const handleUpdate = (updatedConvo: UpdatedConversation) => {
      const lastMessage = updatedConvo.messages[0];

      // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –¢–Ü–õ–¨–ö–ò —è–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
      if (lastMessage && lastMessage.senderRole === 'USER') {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π toast –∑ –∫–Ω–æ–ø–∫–æ—é "–ü–µ—Ä–µ–π—Ç–∏"
        toast(
          (t) => (
            <div className="flex items-center gap-4">
              <div className="flex-1">
                <p className="font-bold">–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</p>
                <p className="text-sm">
                  –í—ñ–¥: <span className="font-medium">{updatedConvo.user.fullName}</span>
                </p>
                <p className="text-sm text-gray-500 truncate mt-1">
                  {lastMessage.text}
                </p>
              </div>
              <div className="flex flex-col gap-2">
                <button
                  onClick={() => {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —á–∞—Ç—É —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    router.push(`/manager/chat/${updatedConvo.id}`);
                    toast.dismiss(t.id);
                  }}
                  className="px-3 py-1 text-sm bg-primary text-primary-foreground rounded-md hover:bg-primary/90"
                >
                  –ü–µ—Ä–µ–π—Ç–∏
                </button>
                <button
                  onClick={() => toast.dismiss(t.id)}
                  className="px-3 py-1 text-xs text-gray-500 bg-gray-100 rounded-md hover:bg-gray-200"
                >
                  –ó–∞–∫—Ä–∏—Ç–∏
                </button>
              </div>
            </div>
          ),
          {
            icon: 'üí¨',
            duration: 10000, // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∏–º–∏–º 10 —Å–µ–∫—É–Ω–¥
          }
        );
      }
    };

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    channel.bind("update-conversation", handleUpdate);

    // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      channel.unbind("update-conversation", handleUpdate);
      pusher.unsubscribe("manager-chat-list");
    };
  }, [router]); // –î–æ–¥–∞—î–º–æ router –¥–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
  return null;
};